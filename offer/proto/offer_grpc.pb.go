// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/offer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfferClient is the client API for Offer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferClient interface {
	GetOffers(ctx context.Context, in *GetOffersRequest, opts ...grpc.CallOption) (*GetOffersResponse, error)
	GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error)
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error)
	UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error)
	DeleteOffer(ctx context.Context, in *DeleteOfferRequest, opts ...grpc.CallOption) (*DeleteOfferResponse, error)
	GetOfferById(ctx context.Context, in *GetOfferIdRequest, opts ...grpc.CallOption) (*GetOfferIdResponse, error)
}

type offerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferClient(cc grpc.ClientConnInterface) OfferClient {
	return &offerClient{cc}
}

func (c *offerClient) GetOffers(ctx context.Context, in *GetOffersRequest, opts ...grpc.CallOption) (*GetOffersResponse, error) {
	out := new(GetOffersResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/GetOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) GetOffer(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error) {
	out := new(GetOfferResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/GetOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error) {
	out := new(CreateOfferResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/CreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error) {
	out := new(UpdateOfferResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/UpdateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) DeleteOffer(ctx context.Context, in *DeleteOfferRequest, opts ...grpc.CallOption) (*DeleteOfferResponse, error) {
	out := new(DeleteOfferResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/DeleteOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) GetOfferById(ctx context.Context, in *GetOfferIdRequest, opts ...grpc.CallOption) (*GetOfferIdResponse, error) {
	out := new(GetOfferIdResponse)
	err := c.cc.Invoke(ctx, "/offer.Offer/GetOfferById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferServer is the server API for Offer service.
// All implementations must embed UnimplementedOfferServer
// for forward compatibility
type OfferServer interface {
	GetOffers(context.Context, *GetOffersRequest) (*GetOffersResponse, error)
	GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error)
	CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error)
	UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error)
	DeleteOffer(context.Context, *DeleteOfferRequest) (*DeleteOfferResponse, error)
	GetOfferById(context.Context, *GetOfferIdRequest) (*GetOfferIdResponse, error)
	mustEmbedUnimplementedOfferServer()
}

// UnimplementedOfferServer must be embedded to have forward compatible implementations.
type UnimplementedOfferServer struct {
}

func (UnimplementedOfferServer) GetOffers(context.Context, *GetOffersRequest) (*GetOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffers not implemented")
}
func (UnimplementedOfferServer) GetOffer(context.Context, *GetOfferRequest) (*GetOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedOfferServer) CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedOfferServer) UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffer not implemented")
}
func (UnimplementedOfferServer) DeleteOffer(context.Context, *DeleteOfferRequest) (*DeleteOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffer not implemented")
}
func (UnimplementedOfferServer) GetOfferById(context.Context, *GetOfferIdRequest) (*GetOfferIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferById not implemented")
}
func (UnimplementedOfferServer) mustEmbedUnimplementedOfferServer() {}

// UnsafeOfferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferServer will
// result in compilation errors.
type UnsafeOfferServer interface {
	mustEmbedUnimplementedOfferServer()
}

func RegisterOfferServer(s grpc.ServiceRegistrar, srv OfferServer) {
	s.RegisterService(&Offer_ServiceDesc, srv)
}

func _Offer_GetOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/GetOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetOffers(ctx, req.(*GetOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/GetOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetOffer(ctx, req.(*GetOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/CreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_UpdateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).UpdateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/UpdateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).UpdateOffer(ctx, req.(*UpdateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_DeleteOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).DeleteOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/DeleteOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).DeleteOffer(ctx, req.(*DeleteOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_GetOfferById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetOfferById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offer.Offer/GetOfferById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetOfferById(ctx, req.(*GetOfferIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Offer_ServiceDesc is the grpc.ServiceDesc for Offer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offer.Offer",
	HandlerType: (*OfferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOffers",
			Handler:    _Offer_GetOffers_Handler,
		},
		{
			MethodName: "GetOffer",
			Handler:    _Offer_GetOffer_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _Offer_CreateOffer_Handler,
		},
		{
			MethodName: "UpdateOffer",
			Handler:    _Offer_UpdateOffer_Handler,
		},
		{
			MethodName: "DeleteOffer",
			Handler:    _Offer_DeleteOffer_Handler,
		},
		{
			MethodName: "GetOfferById",
			Handler:    _Offer_GetOfferById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/offer.proto",
}

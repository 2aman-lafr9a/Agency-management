// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/agency.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgencyClient is the client API for Agency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgencyClient interface {
	GetAgencies(ctx context.Context, in *GetAgenciesRequest, opts ...grpc.CallOption) (*GetAgenciesResponse, error)
	GetAgency(ctx context.Context, in *GetAgencyRequest, opts ...grpc.CallOption) (*GetAgencyResponse, error)
	CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error)
	UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, opts ...grpc.CallOption) (*UpdateAgencyResponse, error)
	DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, opts ...grpc.CallOption) (*DeleteAgencyResponse, error)
}

type agencyClient struct {
	cc grpc.ClientConnInterface
}

func NewAgencyClient(cc grpc.ClientConnInterface) AgencyClient {
	return &agencyClient{cc}
}

func (c *agencyClient) GetAgencies(ctx context.Context, in *GetAgenciesRequest, opts ...grpc.CallOption) (*GetAgenciesResponse, error) {
	out := new(GetAgenciesResponse)
	err := c.cc.Invoke(ctx, "/agency.Agency/GetAgencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyClient) GetAgency(ctx context.Context, in *GetAgencyRequest, opts ...grpc.CallOption) (*GetAgencyResponse, error) {
	out := new(GetAgencyResponse)
	err := c.cc.Invoke(ctx, "/agency.Agency/GetAgency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyClient) CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error) {
	out := new(CreateAgencyResponse)
	err := c.cc.Invoke(ctx, "/agency.Agency/CreateAgency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyClient) UpdateAgency(ctx context.Context, in *UpdateAgencyRequest, opts ...grpc.CallOption) (*UpdateAgencyResponse, error) {
	out := new(UpdateAgencyResponse)
	err := c.cc.Invoke(ctx, "/agency.Agency/UpdateAgency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyClient) DeleteAgency(ctx context.Context, in *DeleteAgencyRequest, opts ...grpc.CallOption) (*DeleteAgencyResponse, error) {
	out := new(DeleteAgencyResponse)
	err := c.cc.Invoke(ctx, "/agency.Agency/DeleteAgency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgencyServer is the server API for Agency service.
// All implementations must embed UnimplementedAgencyServer
// for forward compatibility
type AgencyServer interface {
	GetAgencies(context.Context, *GetAgenciesRequest) (*GetAgenciesResponse, error)
	GetAgency(context.Context, *GetAgencyRequest) (*GetAgencyResponse, error)
	CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error)
	UpdateAgency(context.Context, *UpdateAgencyRequest) (*UpdateAgencyResponse, error)
	DeleteAgency(context.Context, *DeleteAgencyRequest) (*DeleteAgencyResponse, error)
	mustEmbedUnimplementedAgencyServer()
}

// UnimplementedAgencyServer must be embedded to have forward compatible implementations.
type UnimplementedAgencyServer struct {
}

func (UnimplementedAgencyServer) GetAgencies(context.Context, *GetAgenciesRequest) (*GetAgenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencies not implemented")
}
func (UnimplementedAgencyServer) GetAgency(context.Context, *GetAgencyRequest) (*GetAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgency not implemented")
}
func (UnimplementedAgencyServer) CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgency not implemented")
}
func (UnimplementedAgencyServer) UpdateAgency(context.Context, *UpdateAgencyRequest) (*UpdateAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgency not implemented")
}
func (UnimplementedAgencyServer) DeleteAgency(context.Context, *DeleteAgencyRequest) (*DeleteAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgency not implemented")
}
func (UnimplementedAgencyServer) mustEmbedUnimplementedAgencyServer() {}

// UnsafeAgencyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgencyServer will
// result in compilation errors.
type UnsafeAgencyServer interface {
	mustEmbedUnimplementedAgencyServer()
}

func RegisterAgencyServer(s grpc.ServiceRegistrar, srv AgencyServer) {
	s.RegisterService(&Agency_ServiceDesc, srv)
}

func _Agency_GetAgencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServer).GetAgencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.Agency/GetAgencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServer).GetAgencies(ctx, req.(*GetAgenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agency_GetAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServer).GetAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.Agency/GetAgency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServer).GetAgency(ctx, req.(*GetAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agency_CreateAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServer).CreateAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.Agency/CreateAgency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServer).CreateAgency(ctx, req.(*CreateAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agency_UpdateAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServer).UpdateAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.Agency/UpdateAgency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServer).UpdateAgency(ctx, req.(*UpdateAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agency_DeleteAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServer).DeleteAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.Agency/DeleteAgency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServer).DeleteAgency(ctx, req.(*DeleteAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agency_ServiceDesc is the grpc.ServiceDesc for Agency service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agency_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agency.Agency",
	HandlerType: (*AgencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgencies",
			Handler:    _Agency_GetAgencies_Handler,
		},
		{
			MethodName: "GetAgency",
			Handler:    _Agency_GetAgency_Handler,
		},
		{
			MethodName: "CreateAgency",
			Handler:    _Agency_CreateAgency_Handler,
		},
		{
			MethodName: "UpdateAgency",
			Handler:    _Agency_UpdateAgency_Handler,
		},
		{
			MethodName: "DeleteAgency",
			Handler:    _Agency_DeleteAgency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agency.proto",
}
